---
###############################################################################
#
# Ansible Playbook for CIS SUSE Linux Enterprise 15 Benchmark
#
# Profile Description:
# This baseline aligns to the Center for Internet Security
# SUSE Linux Enterprise 15 Benchmark, v1.0.0, currently in draft.
#
# Profile ID:  cis
# Benchmark ID:  SLE-15
# Benchmark Version:  0.1.50
# XCCDF Version:  1.1
#
# This file was generated by OpenSCAP 1.3.3 using:
# $ oscap xccdf generate fix --profile cis --fix-type ansible xccdf-file.xml
#
# This Ansible Playbook is generated from an OpenSCAP profile without preliminary evaluation.
# It attempts to fix every selected rule, even if the system is already compliant.
#
# How to apply this Ansible Playbook:
# $ ansible-playbook -i "localhost," -c local playbook.yml
# $ ansible-playbook -i "192.168.1.155," playbook.yml
# $ ansible-playbook -i inventory.ini playbook.yml
#
###############################################################################

- hosts: all
  vars:
    sysctl_net_ipv4_conf_default_rp_filter_value: !!str 1
    sysctl_net_ipv4_icmp_ignore_bogus_error_responses_value: !!str 1
    sysctl_net_ipv4_conf_all_log_martians_value: !!str 1
    sysctl_net_ipv4_conf_all_accept_redirects_value: !!str 0
    sysctl_net_ipv4_tcp_syncookies_value: !!str 1
    sysctl_net_ipv4_conf_all_rp_filter_value: !!str 1
    sysctl_net_ipv4_conf_all_secure_redirects_value: !!str 0
    sysctl_net_ipv4_conf_default_accept_redirects_value: !!str 0
    sysctl_net_ipv4_conf_default_secure_redirects_value: !!str 0
    sysctl_net_ipv4_conf_default_log_martians_value: !!str 1
    sysctl_net_ipv4_conf_default_accept_source_route_value: !!str 0
    sysctl_net_ipv4_conf_all_accept_source_route_value: !!str 0
    sysctl_net_ipv4_icmp_echo_ignore_broadcasts_value: !!str 1
    sysctl_net_ipv6_conf_default_accept_ra_value: !!str 0
    sysctl_net_ipv6_conf_all_accept_ra_value: !!str 0
    var_removable_partition: !!str /dev/cdrom
    var_multiple_time_servers: !!str 0.pool.ntp.org,1.pool.ntp.org,2.pool.ntp.org,3.pool.ntp.org
  tasks:
    - name: Test for existence /etc/issue
      stat:
        path: /etc/issue
      register: file_exists
      tags:
        - file_permissions_etc_issue
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure permission 0644 on /etc/issue
      file:
        path: /etc/issue
        mode: '0644'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_permissions_etc_issue
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Test for existence /etc/motd
      stat:
        path: /etc/motd
      register: file_exists
      tags:
        - file_permissions_etc_motd
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure permission 0644 on /etc/motd
      file:
        path: /etc/motd
        mode: '0644'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_permissions_etc_motd
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: require single user mode password
      lineinfile:
        create: true
        dest: /usr/lib/systemd/system/rescue.service
        regexp: ^#?ExecStart=
        line: ExecStart=-/bin/sh -c "/sbin/sulogin; /usr/bin/systemctl --fail --no-block
          default"
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - require_singleuser_auth
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-IA-2
        - NIST-800-53-AC-3
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.1
        - NIST-800-171-3.4.5

    - name: require emergency mode password
      lineinfile:
        create: true
        dest: /usr/lib/systemd/system/emergency.service
        regexp: ^#?ExecStart=
        line: ExecStart=-/bin/sh -c "/sbin/sulogin; /usr/bin/systemctl --fail --no-block
          default"
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - require_emergency_target_auth
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-IA-2
        - NIST-800-53-AC-3
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.1
        - NIST-800-171-3.4.5

    - name: Ensure audit is installed
      package:
        name: audit
        state: present
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      ignore_errors: true
      tags:
        - package_audit_installed
        - medium_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-7(a)
        - NIST-800-53-AU-7(1)
        - NIST-800-53-AU-7(2)
        - NIST-800-53-AU-14
        - NIST-800-53-AU-12(2)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-CM-6(a)

    - name: Enable service auditd
      block:

        #- name: Gather the package facts
          #ignore_errors: yes
          #package_facts:
          #  manager: auto
          #ignore_errors: yes

        - name: Enable service auditd
          service:
            name: auditd
            enabled: 'yes'
            state: started
            #when:
            #- '"audit" in ansible_facts.packages'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_auditd_enabled
        - high_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-2(g)
        - NIST-800-53-AU-3
        - NIST-800-53-AU-10
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AU-14(1)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.3.1
        - NIST-800-171-3.3.2
        - NIST-800-171-3.3.6
        - PCI-DSS-Req-10.1
        - CJIS-5.4.1.1

    - name: Search /etc/audit/rules.d for audit rule entries for sysadmin actions
      find:
        paths: /etc/audit/rules.d
        recurse: false
        contains: ^.*/etc/sudoers.*$
        patterns: '*.rules'
      register: find_audit_sysadmin_actions
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_sysadmin_actions
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-2(7)(b)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.2
        - PCI-DSS-Req-10.2.5.b
        - CJIS-5.4.1.1

    - name: Use /etc/audit/rules.d/actions.rules as the recipient for the rule
      set_fact:
        all_sysadmin_actions_files:
          - /etc/audit/rules.d/actions.rules
      when:
        - find_audit_sysadmin_actions.matched is defined and find_audit_sysadmin_actions.matched
          == 0
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_sysadmin_actions
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-2(7)(b)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.2
        - PCI-DSS-Req-10.2.5.b
        - CJIS-5.4.1.1

    - name: Use matched file as the recipient for the rule
      set_fact:
        all_sysadmin_actions_files:
          - '{{ find_audit_sysadmin_actions.files | map(attribute=''path'') | list | first
            }}'
      when:
        - find_audit_sysadmin_actions.matched is defined and find_audit_sysadmin_actions.matched
          > 0
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_sysadmin_actions
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-2(7)(b)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.2
        - PCI-DSS-Req-10.2.5.b
        - CJIS-5.4.1.1

    - name: Inserts/replaces audit rule for /etc/sudoers rule in rules.d
      lineinfile:
        path: '{{ all_sysadmin_actions_files[0] }}'
        line: -w /etc/sudoers -p wa -k actions
        create: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_sysadmin_actions
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-2(7)(b)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.2
        - PCI-DSS-Req-10.2.5.b
        - CJIS-5.4.1.1

    - name: Inserts/replaces audit rule for /etc/sudoers.d rule in rules.d
      lineinfile:
        path: '{{ all_sysadmin_actions_files[0] }}'
        line: -w /etc/sudoers.d/ -p wa -k actions
        create: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_sysadmin_actions
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-2(7)(b)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.2
        - PCI-DSS-Req-10.2.5.b
        - CJIS-5.4.1.1

    - name: Inserts/replaces audit rule for /etc/sudoers in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: -w /etc/sudoers -p wa -k actions
        create: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_sysadmin_actions
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-2(7)(b)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.2
        - PCI-DSS-Req-10.2.5.b
        - CJIS-5.4.1.1

    - name: Inserts/replaces audit rule for /etc/sudoers.d in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: -w /etc/sudoers.d/ -p wa -k actions
        create: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_sysadmin_actions
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-2(7)(b)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.2
        - PCI-DSS-Req-10.2.5.b
        - CJIS-5.4.1.1

    - name: Set architecture for audit tasks
      set_fact:
        audit_arch: b{{ ansible_architecture | regex_replace('.*(\d\d$)','\1') }}
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_clock_settime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Perform remediation of Audit rules for clock_settime for x86 platform
      block:

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - clock_settime

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b32 in /etc/audit/rules.d/
          find:
            paths: /etc/audit/rules.d
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b32[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(?:-F[\s]+a0=0x0[\s]+)(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: '*.rules'
          register: audit_syscalls_found_b32_rules_d
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b32 in /etc/audit/rules.d/
          set_fact: audit_syscalls_matched_b32_rules_d="{{ audit_syscalls_found_b32_rules_d.results|sum(attribute='matched')|int
            }}"

        - name: Search /etc/audit/rules.d for other rules with the key time-change
          find:
            paths: /etc/audit/rules.d
            contains: ^.*(?:-F key=|-k\s+)time-change$
            patterns: '*.rules'
          register: find_syscalls_files

        - name: Use /etc/audit/rules.d/time-change.rules as the recipient for the rule
          set_fact:
            all_files:
              - /etc/audit/rules.d/time-change.rules
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            == 0

        - name: Use matched file as the recipient for the rule
          set_fact:
            all_files:
              - '{{ find_syscalls_files.files | map(attribute=''path'') | list | first
                }}'
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            > 0

        - name: Insert the syscall rule in {{ all_files[0] }}
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b32"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b32_rules_d.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -F a0=0x0 -k time-change' }}"

            - name: Insert the line in {{ all_files[0] }}
              lineinfile:
                path: '{{ all_files[0] }}'
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b32_rules_d < audit_syscalls_number_of_syscalls

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - clock_settime

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b32 in /etc/audit/audit.rules
          find:
            paths: /etc/audit
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b32[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(?:-F[\s]+a0=0x0[\s]+)(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: audit.rules
          register: audit_syscalls_found_b32_audit_rules
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b32 in /etc/audit/audit.rules
          set_fact: audit_syscalls_matched_b32_audit_rules="{{ audit_syscalls_found_b32_audit_rules.results|sum(attribute='matched')|int
            }}"

        - name: Insert the syscall rule in /etc/audit/audit.rules
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b32"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b32_audit_rules.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -F a0=0x0 -k time-change' }}"

            - name: Insert the line in /etc/audit/audit.rules
              lineinfile:
                path: /etc/audit/audit.rules
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b32_audit_rules < audit_syscalls_number_of_syscalls
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_clock_settime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Perform remediation of Audit rules for clock_settime for x86_64 platform
      block:

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - clock_settime

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b64 in /etc/audit/rules.d/
          find:
            paths: /etc/audit/rules.d
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b64[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(?:-F[\s]+a0=0x0[\s]+)(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: '*.rules'
          register: audit_syscalls_found_b64_rules_d
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b64 in /etc/audit/rules.d/
          set_fact: audit_syscalls_matched_b64_rules_d="{{ audit_syscalls_found_b64_rules_d.results|sum(attribute='matched')|int
            }}"

        - name: Search /etc/audit/rules.d for other rules with the key time-change
          find:
            paths: /etc/audit/rules.d
            contains: ^.*(?:-F key=|-k\s+)time-change$
            patterns: '*.rules'
          register: find_syscalls_files

        - name: Use /etc/audit/rules.d/time-change.rules as the recipient for the rule
          set_fact:
            all_files:
              - /etc/audit/rules.d/time-change.rules
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            == 0

        - name: Use matched file as the recipient for the rule
          set_fact:
            all_files:
              - '{{ find_syscalls_files.files | map(attribute=''path'') | list | first
                }}'
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            > 0

        - name: Insert the syscall rule in {{ all_files[0] }}
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b64"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b64_rules_d.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -F a0=0x0 -k time-change' }}"

            - name: Insert the line in {{ all_files[0] }}
              lineinfile:
                path: '{{ all_files[0] }}'
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b64_rules_d < audit_syscalls_number_of_syscalls

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - clock_settime

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b64 in /etc/audit/audit.rules
          find:
            paths: /etc/audit
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b64[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(?:-F[\s]+a0=0x0[\s]+)(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: audit.rules
          register: audit_syscalls_found_b64_audit_rules
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b64 in /etc/audit/audit.rules
          set_fact: audit_syscalls_matched_b64_audit_rules="{{ audit_syscalls_found_b64_audit_rules.results|sum(attribute='matched')|int
            }}"

        - name: Insert the syscall rule in /etc/audit/audit.rules
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b64"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b64_audit_rules.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -F a0=0x0 -k time-change' }}"

            - name: Insert the line in /etc/audit/audit.rules
              lineinfile:
                path: /etc/audit/audit.rules
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b64_audit_rules < audit_syscalls_number_of_syscalls
      when:
        - audit_arch == "b64"
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_clock_settime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Check if watch rule for /etc/localtime already exists in /etc/audit/rules.d/
      find:
        paths: /etc/audit/rules.d
        contains: ^\s*-w\s+/etc/localtime\s+-p\s+wa(\s|$)+
        patterns: '*.rules'
      register: find_existing_watch_rules_d
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_watch_localtime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Search /etc/audit/rules.d for other rules with specified key audit_time_rules
      find:
        paths: /etc/audit/rules.d
        contains: ^.*(?:-F key=|-k\s+)audit_time_rules$
        patterns: '*.rules'
      register: find_watch_key
      when:
        - find_existing_watch_rules_d.matched is defined and find_existing_watch_rules_d.matched
          == 0
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_watch_localtime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Use /etc/audit/rules.d/audit_time_rules.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/audit_time_rules.rules
      when:
        - find_watch_key.matched is defined and find_watch_key.matched == 0 and find_existing_watch_rules_d.matched
          is defined and find_existing_watch_rules_d.matched == 0
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_watch_localtime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - '{{ find_watch_key.files | map(attribute=''path'') | list | first }}'
      when:
        - find_watch_key.matched is defined and find_watch_key.matched > 0 and find_existing_watch_rules_d.matched
          is defined and find_existing_watch_rules_d.matched == 0
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_watch_localtime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Add watch rule for /etc/localtime in /etc/audit/rules.d/
      lineinfile:
        path: '{{ all_files[0] }}'
        line: -w /etc/localtime -p wa -k audit_time_rules
        create: true
      when:
        - find_existing_watch_rules_d.matched is defined and find_existing_watch_rules_d.matched
          == 0
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_watch_localtime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Check if watch rule for /etc/localtime already exists in /etc/audit/audit.rules
      find:
        paths: /etc/audit/
        contains: ^\s*-w\s+/etc/localtime\s+-p\s+wa(\s|$)+
        patterns: audit.rules
      register: find_existing_watch_audit_rules
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_watch_localtime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Add watch rule for /etc/localtime in /etc/audit/audit.rules
      lineinfile:
        line: -w /etc/localtime -p wa -k audit_time_rules
        state: present
        dest: /etc/audit/audit.rules
        create: true
      when:
        - find_existing_watch_audit_rules.matched is defined and find_existing_watch_audit_rules.matched
          == 0
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_watch_localtime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Set architecture for audit tasks
      set_fact:
        audit_arch: b{{ ansible_architecture | regex_replace('.*(\d\d$)','\1') }}
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_settimeofday
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Perform remediation of Audit rules for settimeofday for x86 platform
      block:

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - settimeofday

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b32 in /etc/audit/rules.d/
          find:
            paths: /etc/audit/rules.d
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b32[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: '*.rules'
          register: audit_syscalls_found_b32_rules_d
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b32 in /etc/audit/rules.d/
          set_fact: audit_syscalls_matched_b32_rules_d="{{ audit_syscalls_found_b32_rules_d.results|sum(attribute='matched')|int
            }}"

        - name: Search /etc/audit/rules.d for other rules with the key audit_time_rules
          find:
            paths: /etc/audit/rules.d
            contains: ^.*(?:-F key=|-k\s+)audit_time_rules$
            patterns: '*.rules'
          register: find_syscalls_files

        - name: Use /etc/audit/rules.d/audit_time_rules.rules as the recipient for the
            rule
          set_fact:
            all_files:
              - /etc/audit/rules.d/audit_time_rules.rules
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            == 0

        - name: Use matched file as the recipient for the rule
          set_fact:
            all_files:
              - '{{ find_syscalls_files.files | map(attribute=''path'') | list | first
                }}'
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            > 0

        - name: Insert the syscall rule in {{ all_files[0] }}
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b32"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b32_rules_d.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in {{ all_files[0] }}
              lineinfile:
                path: '{{ all_files[0] }}'
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b32_rules_d < audit_syscalls_number_of_syscalls

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - settimeofday

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b32 in /etc/audit/audit.rules
          find:
            paths: /etc/audit
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b32[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: audit.rules
          register: audit_syscalls_found_b32_audit_rules
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b32 in /etc/audit/audit.rules
          set_fact: audit_syscalls_matched_b32_audit_rules="{{ audit_syscalls_found_b32_audit_rules.results|sum(attribute='matched')|int
            }}"

        - name: Insert the syscall rule in /etc/audit/audit.rules
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b32"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b32_audit_rules.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in /etc/audit/audit.rules
              lineinfile:
                path: /etc/audit/audit.rules
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b32_audit_rules < audit_syscalls_number_of_syscalls
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_settimeofday
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Perform remediation of Audit rules for settimeofday for x86_64 platform
      block:

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - settimeofday

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b64 in /etc/audit/rules.d/
          find:
            paths: /etc/audit/rules.d
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b64[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: '*.rules'
          register: audit_syscalls_found_b64_rules_d
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b64 in /etc/audit/rules.d/
          set_fact: audit_syscalls_matched_b64_rules_d="{{ audit_syscalls_found_b64_rules_d.results|sum(attribute='matched')|int
            }}"

        - name: Search /etc/audit/rules.d for other rules with the key audit_time_rules
          find:
            paths: /etc/audit/rules.d
            contains: ^.*(?:-F key=|-k\s+)audit_time_rules$
            patterns: '*.rules'
          register: find_syscalls_files

        - name: Use /etc/audit/rules.d/audit_time_rules.rules as the recipient for the
            rule
          set_fact:
            all_files:
              - /etc/audit/rules.d/audit_time_rules.rules
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            == 0

        - name: Use matched file as the recipient for the rule
          set_fact:
            all_files:
              - '{{ find_syscalls_files.files | map(attribute=''path'') | list | first
                }}'
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            > 0

        - name: Insert the syscall rule in {{ all_files[0] }}
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b64"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b64_rules_d.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in {{ all_files[0] }}
              lineinfile:
                path: '{{ all_files[0] }}'
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b64_rules_d < audit_syscalls_number_of_syscalls

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - settimeofday

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b64 in /etc/audit/audit.rules
          find:
            paths: /etc/audit
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b64[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: audit.rules
          register: audit_syscalls_found_b64_audit_rules
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b64 in /etc/audit/audit.rules
          set_fact: audit_syscalls_matched_b64_audit_rules="{{ audit_syscalls_found_b64_audit_rules.results|sum(attribute='matched')|int
            }}"

        - name: Insert the syscall rule in /etc/audit/audit.rules
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b64"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b64_audit_rules.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in /etc/audit/audit.rules
              lineinfile:
                path: /etc/audit/audit.rules
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b64_audit_rules < audit_syscalls_number_of_syscalls
      when:
        - audit_arch == "b64"
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_settimeofday
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Perform remediation of Audit rules for stime syscall for x86 platform
      block:

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - stime

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b32 in /etc/audit/rules.d/
          find:
            paths: /etc/audit/rules.d
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b32[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: '*.rules'
          register: audit_syscalls_found_b32_rules_d
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b32 in /etc/audit/rules.d/
          set_fact: audit_syscalls_matched_b32_rules_d="{{ audit_syscalls_found_b32_rules_d.results|sum(attribute='matched')|int
            }}"

        - name: Search /etc/audit/rules.d for other rules with the key audit_time_rules
          find:
            paths: /etc/audit/rules.d
            contains: ^.*(?:-F key=|-k\s+)audit_time_rules$
            patterns: '*.rules'
          register: find_syscalls_files

        - name: Use /etc/audit/rules.d/audit_time_rules.rules as the recipient for the
            rule
          set_fact:
            all_files:
              - /etc/audit/rules.d/audit_time_rules.rules
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            == 0

        - name: Use matched file as the recipient for the rule
          set_fact:
            all_files:
              - '{{ find_syscalls_files.files | map(attribute=''path'') | list | first
                }}'
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            > 0

        - name: Insert the syscall rule in {{ all_files[0] }}
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b32"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b32_rules_d.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in {{ all_files[0] }}
              lineinfile:
                path: '{{ all_files[0] }}'
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b32_rules_d < audit_syscalls_number_of_syscalls

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - stime

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b32 in /etc/audit/audit.rules
          find:
            paths: /etc/audit
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b32[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: audit.rules
          register: audit_syscalls_found_b32_audit_rules
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b32 in /etc/audit/audit.rules
          set_fact: audit_syscalls_matched_b32_audit_rules="{{ audit_syscalls_found_b32_audit_rules.results|sum(attribute='matched')|int
            }}"

        - name: Insert the syscall rule in /etc/audit/audit.rules
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b32"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b32_audit_rules.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in /etc/audit/audit.rules
              lineinfile:
                path: /etc/audit/audit.rules
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b32_audit_rules < audit_syscalls_number_of_syscalls
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_stime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Set architecture for audit tasks
      set_fact:
        audit_arch: b{{ ansible_architecture | regex_replace('.*(\d\d$)','\1') }}
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_adjtimex
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Perform remediation of Audit rules for adjtimex for x86 platform
      block:

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - adjtimex

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b32 in /etc/audit/rules.d/
          find:
            paths: /etc/audit/rules.d
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b32[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: '*.rules'
          register: audit_syscalls_found_b32_rules_d
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b32 in /etc/audit/rules.d/
          set_fact: audit_syscalls_matched_b32_rules_d="{{ audit_syscalls_found_b32_rules_d.results|sum(attribute='matched')|int
            }}"

        - name: Search /etc/audit/rules.d for other rules with the key audit_time_rules
          find:
            paths: /etc/audit/rules.d
            contains: ^.*(?:-F key=|-k\s+)audit_time_rules$
            patterns: '*.rules'
          register: find_syscalls_files

        - name: Use /etc/audit/rules.d/audit_time_rules.rules as the recipient for the
            rule
          set_fact:
            all_files:
              - /etc/audit/rules.d/audit_time_rules.rules
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            == 0

        - name: Use matched file as the recipient for the rule
          set_fact:
            all_files:
              - '{{ find_syscalls_files.files | map(attribute=''path'') | list | first
                }}'
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            > 0

        - name: Insert the syscall rule in {{ all_files[0] }}
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b32"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b32_rules_d.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in {{ all_files[0] }}
              lineinfile:
                path: '{{ all_files[0] }}'
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b32_rules_d < audit_syscalls_number_of_syscalls

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - adjtimex

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b32 in /etc/audit/audit.rules
          find:
            paths: /etc/audit
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b32[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: audit.rules
          register: audit_syscalls_found_b32_audit_rules
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b32 in /etc/audit/audit.rules
          set_fact: audit_syscalls_matched_b32_audit_rules="{{ audit_syscalls_found_b32_audit_rules.results|sum(attribute='matched')|int
            }}"

        - name: Insert the syscall rule in /etc/audit/audit.rules
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b32"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b32_audit_rules.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in /etc/audit/audit.rules
              lineinfile:
                path: /etc/audit/audit.rules
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b32_audit_rules < audit_syscalls_number_of_syscalls
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_adjtimex
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Perform remediation of Audit rules for adjtimex for x86_64 platform
      block:

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - adjtimex

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b64 in /etc/audit/rules.d/
          find:
            paths: /etc/audit/rules.d
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b64[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: '*.rules'
          register: audit_syscalls_found_b64_rules_d
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b64 in /etc/audit/rules.d/
          set_fact: audit_syscalls_matched_b64_rules_d="{{ audit_syscalls_found_b64_rules_d.results|sum(attribute='matched')|int
            }}"

        - name: Search /etc/audit/rules.d for other rules with the key audit_time_rules
          find:
            paths: /etc/audit/rules.d
            contains: ^.*(?:-F key=|-k\s+)audit_time_rules$
            patterns: '*.rules'
          register: find_syscalls_files

        - name: Use /etc/audit/rules.d/audit_time_rules.rules as the recipient for the
            rule
          set_fact:
            all_files:
              - /etc/audit/rules.d/audit_time_rules.rules
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            == 0

        - name: Use matched file as the recipient for the rule
          set_fact:
            all_files:
              - '{{ find_syscalls_files.files | map(attribute=''path'') | list | first
                }}'
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            > 0

        - name: Insert the syscall rule in {{ all_files[0] }}
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b64"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b64_rules_d.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in {{ all_files[0] }}
              lineinfile:
                path: '{{ all_files[0] }}'
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b64_rules_d < audit_syscalls_number_of_syscalls

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - adjtimex

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b64 in /etc/audit/audit.rules
          find:
            paths: /etc/audit
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b64[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: audit.rules
          register: audit_syscalls_found_b64_audit_rules
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b64 in /etc/audit/audit.rules
          set_fact: audit_syscalls_matched_b64_audit_rules="{{ audit_syscalls_found_b64_audit_rules.results|sum(attribute='matched')|int
            }}"

        - name: Insert the syscall rule in /etc/audit/audit.rules
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b64"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b64_audit_rules.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in /etc/audit/audit.rules
              lineinfile:
                path: /etc/audit/audit.rules
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b64_audit_rules < audit_syscalls_number_of_syscalls
      when:
        - audit_arch == "b64"
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_adjtimex
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Ensure iptables is installed
      package:
        name: iptables
        state: present
      tags:
        - package_iptables_installed
        - medium_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)

    - name: Ensure sysctl net.ipv4.ip_forward is set to 0
      sysctl:
        name: net.ipv4.ip_forward
        value: '0'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_ip_forward
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5CM-6(a)
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv4.conf.default.send_redirects is set to 0
      sysctl:
        name: net.ipv4.conf.default.send_redirects
        value: '0'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_default_send_redirects
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5CM-6(a)
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20
        - CJIS-5.10.1.1

    - name: Ensure sysctl net.ipv4.conf.all.send_redirects is set to 0
      sysctl:
        name: net.ipv4.conf.all.send_redirects
        value: '0'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_all_send_redirects
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5CM-6(a)
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20
        - CJIS-5.10.1.1

    - name: Ensure sysctl net.ipv4.conf.default.rp_filter is set
      sysctl:
        name: net.ipv4.conf.default.rp_filter
        value: '{{ sysctl_net_ipv4_conf_default_rp_filter_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_default_rp_filter
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv4.icmp_ignore_bogus_error_responses is set
      sysctl:
        name: net.ipv4.icmp_ignore_bogus_error_responses
        value: '{{ sysctl_net_ipv4_icmp_ignore_bogus_error_responses_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_icmp_ignore_bogus_error_responses
        - unknown_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv4.conf.all.log_martians is set
      sysctl:
        name: net.ipv4.conf.all.log_martians
        value: '{{ sysctl_net_ipv4_conf_all_log_martians_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_all_log_martians
        - unknown_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5(3)(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv4.conf.all.accept_redirects is set
      sysctl:
        name: net.ipv4.conf.all.accept_redirects
        value: '{{ sysctl_net_ipv4_conf_all_accept_redirects_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_all_accept_redirects
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20
        - CJIS-5.10.1.1

    - name: Ensure sysctl net.ipv4.tcp_syncookies is set
      sysctl:
        name: net.ipv4.tcp_syncookies
        value: '{{ sysctl_net_ipv4_tcp_syncookies_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_tcp_syncookies
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5(1)
        - NIST-800-53-SC-5(2)
        - NIST-800-53-SC-5(3)(a)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.20
        - CJIS-5.10.1.1

    - name: Ensure sysctl net.ipv4.conf.all.rp_filter is set
      sysctl:
        name: net.ipv4.conf.all.rp_filter
        value: '{{ sysctl_net_ipv4_conf_all_rp_filter_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_all_rp_filter
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv4.conf.all.secure_redirects is set
      sysctl:
        name: net.ipv4.conf.all.secure_redirects
        value: '{{ sysctl_net_ipv4_conf_all_secure_redirects_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_all_secure_redirects
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv4.conf.default.accept_redirects is set
      sysctl:
        name: net.ipv4.conf.default.accept_redirects
        value: '{{ sysctl_net_ipv4_conf_default_accept_redirects_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_default_accept_redirects
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20
        - CJIS-5.10.1.1

    - name: Ensure sysctl net.ipv4.conf.default.secure_redirects is set
      sysctl:
        name: net.ipv4.conf.default.secure_redirects
        value: '{{ sysctl_net_ipv4_conf_default_secure_redirects_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_default_secure_redirects
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv4.conf.default.log_martians is set
      sysctl:
        name: net.ipv4.conf.default.log_martians
        value: '{{ sysctl_net_ipv4_conf_default_log_martians_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_default_log_martians
        - unknown_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5(3)(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv4.conf.default.accept_source_route is set
      sysctl:
        name: net.ipv4.conf.default.accept_source_route
        value: '{{ sysctl_net_ipv4_conf_default_accept_source_route_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_default_accept_source_route
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20
        - CJIS-5.10.1.1

    - name: Ensure sysctl net.ipv4.conf.all.accept_source_route is set
      sysctl:
        name: net.ipv4.conf.all.accept_source_route
        value: '{{ sysctl_net_ipv4_conf_all_accept_source_route_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_all_accept_source_route
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5CM-6(a)
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv4.icmp_echo_ignore_broadcasts is set
      sysctl:
        name: net.ipv4.icmp_echo_ignore_broadcasts
        value: '{{ sysctl_net_ipv4_icmp_echo_ignore_broadcasts_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_icmp_echo_ignore_broadcasts
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5
        - NIST-800-171-3.1.20
        - CJIS-5.10.1.1

    - name: Ensure sysctl net.ipv6.conf.default.accept_ra is set
      sysctl:
        name: net.ipv6.conf.default.accept_ra
        value: '{{ sysctl_net_ipv6_conf_default_accept_ra_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv6_conf_default_accept_ra
        - unknown_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv6.conf.all.accept_ra is set
      sysctl:
        name: net.ipv6.conf.all.accept_ra
        value: '{{ sysctl_net_ipv6_conf_all_accept_ra_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv6_conf_all_accept_ra
        - unknown_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.20

    - name: Ensure sudo is installed
      package:
        name: sudo
        state: present
      tags:
        - package_sudo_installed
        - medium_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)

    - name: Ensure aide is installed
      package:
        name: aide
        state: present
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - package_aide_installed
        - medium_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - PCI-DSS-Req-11.5
        - CJIS-5.10.1.3

    - name: Ensure AIDE is installed
      package:
        name: '{{ item }}'
        state: present
      with_items:
        - aide
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - aide_periodic_cron_checking
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-SI-7
        - NIST-800-53-SI-7(1)
        - NIST-800-53-CM-6(a)
        - PCI-DSS-Req-11.5
        - CJIS-5.10.1.3

    - name: Configure Periodic Execution of AIDE
      cron:
        name: run AIDE check
        minute: 5
        hour: 4
        weekday: 0
        user: root
        job: /usr/sbin/aide --check
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - aide_periodic_cron_checking
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-SI-7
        - NIST-800-53-SI-7(1)
        - NIST-800-53-CM-6(a)
        - PCI-DSS-Req-11.5
        - CJIS-5.10.1.3

    - name: Security patches are up to date
      package:
        name: '*'
        state: latest
      tags:
        - security_patches_up_to_date
        - high_severity
        - skip_ansible_lint
        - patch_strategy
        - low_complexity
        - high_disruption
        - reboot_required
        - NIST-800-53-SI-2(5)
        - NIST-800-53-SI-2(c)
        - NIST-800-53-CM-6(a)
        - PCI-DSS-Req-6.2
        - CJIS-5.10.4.1

    - name: Test for existence /boot/grub2/grub.cfg
      stat:
        path: /boot/grub2/grub.cfg
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_grub2_cfg
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - NIST-800-171-3.4.5

    - name: Ensure permission 0600 on /boot/grub2/grub.cfg
      file:
        path: /boot/grub2/grub.cfg
        mode: '0600'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_grub2_cfg
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - NIST-800-171-3.4.5

    - name: Test for existence /boot/grub2/grub.cfg
      stat:
        path: /boot/grub2/grub.cfg
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_groupowner_grub2_cfg
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - NIST-800-171-3.4.5
        - PCI-DSS-Req-7.1
        - CJIS-5.5.2.2

    - name: Ensure group owner 0 on /boot/grub2/grub.cfg
      file:
        path: /boot/grub2/grub.cfg
        group: '0'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_groupowner_grub2_cfg
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - NIST-800-171-3.4.5
        - PCI-DSS-Req-7.1
        - CJIS-5.5.2.2

    - name: Test for existence /boot/grub2/grub.cfg
      stat:
        path: /boot/grub2/grub.cfg
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_owner_grub2_cfg
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - NIST-800-171-3.4.5
        - PCI-DSS-Req-7.1
        - CJIS-5.5.2.2

    - name: Ensure owner 0 on /boot/grub2/grub.cfg
      file:
        path: /boot/grub2/grub.cfg
        owner: '0'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_owner_grub2_cfg
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - NIST-800-171-3.4.5
        - PCI-DSS-Req-7.1
        - CJIS-5.5.2.2

    - name: Ensure sysctl kernel.randomize_va_space is set to 2
      sysctl:
        name: kernel.randomize_va_space
        value: '2'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_kernel_randomize_va_space
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-SC-30
        - NIST-800-53-SC-30(2)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7

    - name: disable core dumps with limits
      lineinfile:
        dest: /etc/security/limits.conf
        regexp: ^[^#].*core
        line: '*        hard       core      0'
        create: true
      tags:
        - disable_users_coredumps
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Disable core dump backtraces
      block:

        - name: Deduplicate values from /etc/systemd/coredump.conf
          lineinfile:
            path: /etc/systemd/coredump.conf
            create: false
            regexp: ^\s*ProcessSizeMax\s*=\s*
            state: absent

        - name: Insert correct line to /etc/systemd/coredump.conf
          lineinfile:
            path: /etc/systemd/coredump.conf
            create: false
            line: ProcessSizeMax=0
            state: present
      tags:
        - coredump_disable_backtraces
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure sysctl fs.suid_dumpable is set to 0
      sysctl:
        name: fs.suid_dumpable
        value: '0'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_fs_suid_dumpable
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - NIST-800-53-SI-11(a)
        - NIST-800-53-SI-11(b)

    - name: Disable storing core dump
      block:

        - name: Deduplicate values from /etc/systemd/coredump.conf
          lineinfile:
            path: /etc/systemd/coredump.conf
            create: false
            regexp: ^\s*Storage\s*=\s*
            state: absent

        - name: Insert correct line to /etc/systemd/coredump.conf
          lineinfile:
            path: /etc/systemd/coredump.conf
            create: false
            line: Storage=none
            state: present
      tags:
        - coredump_disable_storage
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Disable service autofs
      block:

        - name: Gather the service facts
          service_facts: null

        - name: Disable service autofs
          systemd:
            name: autofs.service
            enabled: 'no'
            state: stopped
            masked: 'yes'
          when: '"autofs.service" in ansible_facts.services'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_autofs_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-MP-7
        - NIST-800-171-3.4.6

    - name: Unit Socket Exists - autofs.socket
      command: systemctl list-unit-files autofs.socket
      args:
        warn: false
      register: socket_file_exists
      changed_when: false
      ignore_errors: true
      check_mode: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_autofs_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-MP-7
        - NIST-800-171-3.4.6

    - name: Disable socket autofs
      systemd:
        name: autofs.socket
        enabled: 'no'
        state: stopped
        masked: 'yes'
      when:
        - '"autofs.socket" in socket_file_exists.stdout_lines[1]'
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_autofs_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-MP-7
        - NIST-800-171-3.4.6

    - name: Test for existence /etc/gshadow-
      stat:
        path: /etc/gshadow-
      register: file_exists
      tags:
        - file_permissions_backup_etc_gshadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure permission 0000 on /etc/gshadow-
      file:
        path: /etc/gshadow-
        mode: '0000'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_permissions_backup_etc_gshadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Test for existence /etc/group
      stat:
        path: /etc/group
      register: file_exists
      tags:
        - file_owner_etc_group
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - PCI-DSS-Req-8.7.c
        - CJIS-5.5.2.2

    - name: Ensure owner 0 on /etc/group
      file:
        path: /etc/group
        owner: '0'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_owner_etc_group
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - PCI-DSS-Req-8.7.c
        - CJIS-5.5.2.2

    - name: Test for existence /etc/shadow
      stat:
        path: /etc/shadow
      register: file_exists
      tags:
        - file_permissions_etc_shadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - PCI-DSS-Req-8.7.c
        - CJIS-5.5.2.2

    - name: Ensure permission 0000 on /etc/shadow
      file:
        path: /etc/shadow
        mode: '0000'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_permissions_etc_shadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - PCI-DSS-Req-8.7.c
        - CJIS-5.5.2.2

    - name: Test for existence /etc/group
      stat:
        path: /etc/group
      register: file_exists
      tags:
        - file_permissions_etc_group
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - PCI-DSS-Req-8.7.c
        - CJIS-5.5.2.2

    - name: Ensure permission 0644 on /etc/group
      file:
        path: /etc/group
        mode: '0644'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_permissions_etc_group
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - PCI-DSS-Req-8.7.c
        - CJIS-5.5.2.2

    - name: Test for existence /etc/passwd
      stat:
        path: /etc/passwd
      register: file_exists
      tags:
        - file_groupowner_etc_passwd
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - PCI-DSS-Req-8.7.c
        - CJIS-5.5.2.2

    - name: Ensure group owner 0 on /etc/passwd
      file:
        path: /etc/passwd
        group: '0'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_groupowner_etc_passwd
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - PCI-DSS-Req-8.7.c
        - CJIS-5.5.2.2

    - name: Test for existence /etc/gshadow
      stat:
        path: /etc/gshadow
      register: file_exists
      tags:
        - file_groupowner_etc_gshadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure group owner 0 on /etc/gshadow
      file:
        path: /etc/gshadow
        group: '0'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_groupowner_etc_gshadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Test for existence /etc/group
      stat:
        path: /etc/group
      register: file_exists
      tags:
        - file_groupowner_etc_group
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - PCI-DSS-Req-8.7.c
        - CJIS-5.5.2.2

    - name: Ensure group owner 0 on /etc/group
      file:
        path: /etc/group
        group: '0'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_groupowner_etc_group
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - PCI-DSS-Req-8.7.c
        - CJIS-5.5.2.2

    - name: Test for existence /etc/group-
      stat:
        path: /etc/group-
      register: file_exists
      tags:
        - file_groupowner_backup_etc_group
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure group owner 0 on /etc/group-
      file:
        path: /etc/group-
        group: '0'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_groupowner_backup_etc_group
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Test for existence /etc/gshadow-
      stat:
        path: /etc/gshadow-
      register: file_exists
      tags:
        - file_owner_backup_etc_gshadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure owner 0 on /etc/gshadow-
      file:
        path: /etc/gshadow-
        owner: '0'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_owner_backup_etc_gshadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Test for existence /etc/gshadow
      stat:
        path: /etc/gshadow
      register: file_exists
      tags:
        - file_owner_etc_gshadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure owner 0 on /etc/gshadow
      file:
        path: /etc/gshadow
        owner: '0'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_owner_etc_gshadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Test for existence /etc/passwd-
      stat:
        path: /etc/passwd-
      register: file_exists
      tags:
        - file_owner_backup_etc_passwd
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure owner 0 on /etc/passwd-
      file:
        path: /etc/passwd-
        owner: '0'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_owner_backup_etc_passwd
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Test for existence /etc/shadow
      stat:
        path: /etc/shadow
      register: file_exists
      tags:
        - file_owner_etc_shadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - PCI-DSS-Req-8.7.c
        - CJIS-5.5.2.2

    - name: Ensure owner 0 on /etc/shadow
      file:
        path: /etc/shadow
        owner: '0'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_owner_etc_shadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - PCI-DSS-Req-8.7.c
        - CJIS-5.5.2.2

    - name: Test for existence /etc/passwd-
      stat:
        path: /etc/passwd-
      register: file_exists
      tags:
        - file_groupowner_backup_etc_passwd
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure group owner 0 on /etc/passwd-
      file:
        path: /etc/passwd-
        group: '0'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_groupowner_backup_etc_passwd
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Test for existence /etc/group-
      stat:
        path: /etc/group-
      register: file_exists
      tags:
        - file_owner_backup_etc_group
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure owner 0 on /etc/group-
      file:
        path: /etc/group-
        owner: '0'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_owner_backup_etc_group
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Test for existence /etc/group-
      stat:
        path: /etc/group-
      register: file_exists
      tags:
        - file_permissions_backup_etc_group
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure permission 0644 on /etc/group-
      file:
        path: /etc/group-
        mode: '0644'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_permissions_backup_etc_group
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Test for existence /etc/passwd
      stat:
        path: /etc/passwd
      register: file_exists
      tags:
        - file_owner_etc_passwd
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - PCI-DSS-Req-8.7.c
        - CJIS-5.5.2.2

    - name: Ensure owner 0 on /etc/passwd
      file:
        path: /etc/passwd
        owner: '0'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_owner_etc_passwd
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - PCI-DSS-Req-8.7.c
        - CJIS-5.5.2.2

    - name: Test for existence /etc/passwd-
      stat:
        path: /etc/passwd-
      register: file_exists
      tags:
        - file_permissions_backup_etc_passwd
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure permission 0644 on /etc/passwd-
      file:
        path: /etc/passwd-
        mode: '0644'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_permissions_backup_etc_passwd
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Test for existence /etc/gshadow-
      stat:
        path: /etc/gshadow-
      register: file_exists
      tags:
        - file_groupowner_backup_etc_gshadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure group owner 0 on /etc/gshadow-
      file:
        path: /etc/gshadow-
        group: '0'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_groupowner_backup_etc_gshadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Test for existence /etc/shadow-
      stat:
        path: /etc/shadow-
      register: file_exists
      tags:
        - file_owner_backup_etc_shadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure owner 0 on /etc/shadow-
      file:
        path: /etc/shadow-
        owner: '0'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_owner_backup_etc_shadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Test for existence /etc/shadow
      stat:
        path: /etc/shadow
      register: file_exists
      tags:
        - file_groupowner_etc_shadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - PCI-DSS-Req-8.7.c
        - CJIS-5.5.2.2

    - name: Ensure group owner 0 on /etc/shadow
      file:
        path: /etc/shadow
        group: '0'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_groupowner_etc_shadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - PCI-DSS-Req-8.7.c
        - CJIS-5.5.2.2

    - name: Test for existence /etc/shadow-
      stat:
        path: /etc/shadow-
      register: file_exists
      tags:
        - file_permissions_backup_etc_shadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure permission 0000 on /etc/shadow-
      file:
        path: /etc/shadow-
        mode: '0000'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_permissions_backup_etc_shadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Test for existence /etc/passwd
      stat:
        path: /etc/passwd
      register: file_exists
      tags:
        - file_permissions_etc_passwd
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - PCI-DSS-Req-8.7.c
        - CJIS-5.5.2.2

    - name: Ensure permission 0644 on /etc/passwd
      file:
        path: /etc/passwd
        mode: '0644'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_permissions_etc_passwd
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - PCI-DSS-Req-8.7.c
        - CJIS-5.5.2.2

    - name: Test for existence /etc/shadow-
      stat:
        path: /etc/shadow-
      register: file_exists
      tags:
        - file_groupowner_backup_etc_shadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure group owner 0 on /etc/shadow-
      file:
        path: /etc/shadow-
        group: '0'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_groupowner_backup_etc_shadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Test for existence /etc/gshadow
      stat:
        path: /etc/gshadow
      register: file_exists
      tags:
        - file_permissions_etc_gshadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure permission 0000 on /etc/gshadow
      file:
        path: /etc/gshadow
        mode: '0000'
      when: file_exists.stat is defined and file_exists.stat.exists
      tags:
        - file_permissions_etc_gshadow
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Check information associated to mountpoint
      command: findmnt --fstab '/var/tmp'
      register: device_name
      failed_when: device_name.rc > 1
      changed_when: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_var_tmp_nosuid
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed

    - name: Create mount_info dictionary variable
      set_fact:
        mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
      with_together:
        - '{{ device_name.stdout_lines[0].split() | list | lower }}'
        - '{{ device_name.stdout_lines[1].split() | list }}'
      when:
        - device_name.stdout is defined and device_name.stdout_lines is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_var_tmp_nosuid
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed

    - name: Ensure permission nosuid are set on /var/tmp
      mount:
        path: /var/tmp
        src: '{{ mount_info.source }}'
        opts: '{{ mount_info.options }},nosuid'
        state: mounted
        fstype: '{{ mount_info.fstype }}'
      when:
        - mount_info is defined and "nosuid" not in mount_info.options
        - device_name.stdout is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_var_tmp_nosuid
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed

    - name: Ensure permission nosuid are set on var_removable_partition
      lineinfile:
        path: /etc/fstab
        regexp: ^\s*({{ var_removable_partition }})\s+([^\s]*)\s+([^\s]*)\s+([^\s]*)(.*)$
        backrefs: true
        line: \1 \2 \3 \4,nosuid \5
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_nosuid_removable_partitions
        - medium_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Check information associated to mountpoint
      command: findmnt --fstab '/var/tmp'
      register: device_name
      failed_when: device_name.rc > 1
      changed_when: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_var_tmp_nodev
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed

    - name: Create mount_info dictionary variable
      set_fact:
        mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
      with_together:
        - '{{ device_name.stdout_lines[0].split() | list | lower }}'
        - '{{ device_name.stdout_lines[1].split() | list }}'
      when:
        - device_name.stdout is defined and device_name.stdout_lines is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_var_tmp_nodev
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed

    - name: Ensure permission nodev are set on /var/tmp
      mount:
        path: /var/tmp
        src: '{{ mount_info.source }}'
        opts: '{{ mount_info.options }},nodev'
        state: mounted
        fstype: '{{ mount_info.fstype }}'
      when:
        - mount_info is defined and "nodev" not in mount_info.options
        - device_name.stdout is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_var_tmp_nodev
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed

    - name: Check information associated to mountpoint
      command: findmnt --fstab '/var/tmp'
      register: device_name
      failed_when: device_name.rc > 1
      changed_when: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_var_tmp_noexec
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed

    - name: Create mount_info dictionary variable
      set_fact:
        mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
      with_together:
        - '{{ device_name.stdout_lines[0].split() | list | lower }}'
        - '{{ device_name.stdout_lines[1].split() | list }}'
      when:
        - device_name.stdout is defined and device_name.stdout_lines is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_var_tmp_noexec
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed

    - name: Ensure permission noexec are set on /var/tmp
      mount:
        path: /var/tmp
        src: '{{ mount_info.source }}'
        opts: '{{ mount_info.options }},noexec'
        state: mounted
        fstype: '{{ mount_info.fstype }}'
      when:
        - mount_info is defined and "noexec" not in mount_info.options
        - device_name.stdout is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_var_tmp_noexec
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed

    - name: Check information associated to mountpoint
      command: findmnt  '/dev/shm'
      register: device_name
      failed_when: device_name.rc > 1
      changed_when: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_dev_shm_noexec
        - medium_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Create mount_info dictionary variable
      set_fact:
        mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
      with_together:
        - '{{ device_name.stdout_lines[0].split() | list | lower }}'
        - '{{ device_name.stdout_lines[1].split() | list }}'
      when:
        - device_name.stdout is defined and device_name.stdout_lines is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_dev_shm_noexec
        - medium_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Ensure permission noexec are set on /dev/shm
      mount:
        path: /dev/shm
        src: '{{ mount_info.source }}'
        opts: '{{ mount_info.options }},noexec'
        state: mounted
        fstype: '{{ mount_info.fstype }}'
      when:
        - mount_info is defined and "noexec" not in mount_info.options
        - device_name.stdout is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_dev_shm_noexec
        - medium_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Check information associated to mountpoint
      command: findmnt --fstab '/tmp'
      register: device_name
      failed_when: device_name.rc > 1
      changed_when: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_tmp_nosuid
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Create mount_info dictionary variable
      set_fact:
        mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
      with_together:
        - '{{ device_name.stdout_lines[0].split() | list | lower }}'
        - '{{ device_name.stdout_lines[1].split() | list }}'
      when:
        - device_name.stdout is defined and device_name.stdout_lines is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_tmp_nosuid
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Ensure permission nosuid are set on /tmp
      mount:
        path: /tmp
        src: '{{ mount_info.source }}'
        opts: '{{ mount_info.options }},nosuid'
        state: mounted
        fstype: '{{ mount_info.fstype }}'
      when:
        - mount_info is defined and "nosuid" not in mount_info.options
        - device_name.stdout is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_tmp_nosuid
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Check information associated to mountpoint
      command: findmnt  '/dev/shm'
      register: device_name
      failed_when: device_name.rc > 1
      changed_when: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_dev_shm_nosuid
        - medium_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Create mount_info dictionary variable
      set_fact:
        mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
      with_together:
        - '{{ device_name.stdout_lines[0].split() | list | lower }}'
        - '{{ device_name.stdout_lines[1].split() | list }}'
      when:
        - device_name.stdout is defined and device_name.stdout_lines is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_dev_shm_nosuid
        - medium_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Ensure permission nosuid are set on /dev/shm
      mount:
        path: /dev/shm
        src: '{{ mount_info.source }}'
        opts: '{{ mount_info.options }},nosuid'
        state: mounted
        fstype: '{{ mount_info.fstype }}'
      when:
        - mount_info is defined and "nosuid" not in mount_info.options
        - device_name.stdout is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_dev_shm_nosuid
        - medium_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Check information associated to mountpoint
      command: findmnt --fstab '/tmp'
      register: device_name
      failed_when: device_name.rc > 1
      changed_when: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_tmp_noexec
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Create mount_info dictionary variable
      set_fact:
        mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
      with_together:
        - '{{ device_name.stdout_lines[0].split() | list | lower }}'
        - '{{ device_name.stdout_lines[1].split() | list }}'
      when:
        - device_name.stdout is defined and device_name.stdout_lines is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_tmp_noexec
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Ensure permission noexec are set on /tmp
      mount:
        path: /tmp
        src: '{{ mount_info.source }}'
        opts: '{{ mount_info.options }},noexec'
        state: mounted
        fstype: '{{ mount_info.fstype }}'
      when:
        - mount_info is defined and "noexec" not in mount_info.options
        - device_name.stdout is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_tmp_noexec
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Ensure permission noexec are set on var_removable_partition
      lineinfile:
        path: /etc/fstab
        regexp: ^\s*({{ var_removable_partition }})\s+([^\s]*)\s+([^\s]*)\s+([^\s]*)(.*)$
        backrefs: true
        line: \1 \2 \3 \4,noexec \5
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_noexec_removable_partitions
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Check information associated to mountpoint
      command: findmnt  '/dev/shm'
      register: device_name
      failed_when: device_name.rc > 1
      changed_when: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_dev_shm_nodev
        - medium_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Create mount_info dictionary variable
      set_fact:
        mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
      with_together:
        - '{{ device_name.stdout_lines[0].split() | list | lower }}'
        - '{{ device_name.stdout_lines[1].split() | list }}'
      when:
        - device_name.stdout is defined and device_name.stdout_lines is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_dev_shm_nodev
        - medium_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Ensure permission nodev are set on /dev/shm
      mount:
        path: /dev/shm
        src: '{{ mount_info.source }}'
        opts: '{{ mount_info.options }},nodev'
        state: mounted
        fstype: '{{ mount_info.fstype }}'
      when:
        - mount_info is defined and "nodev" not in mount_info.options
        - device_name.stdout is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_dev_shm_nodev
        - medium_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Ensure permission nodev are set on var_removable_partition
      lineinfile:
        path: /etc/fstab
        regexp: ^\s*({{ var_removable_partition }})\s+([^\s]*)\s+([^\s]*)\s+([^\s]*)(.*)$
        backrefs: true
        line: \1 \2 \3 \4,nodev \5
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_nodev_removable_partitions
        - low_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Check information associated to mountpoint
      command: findmnt --fstab '/home'
      register: device_name
      failed_when: device_name.rc > 1
      changed_when: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_home_nodev
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed

    - name: Create mount_info dictionary variable
      set_fact:
        mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
      with_together:
        - '{{ device_name.stdout_lines[0].split() | list | lower }}'
        - '{{ device_name.stdout_lines[1].split() | list }}'
      when:
        - device_name.stdout is defined and device_name.stdout_lines is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_home_nodev
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed

    - name: Ensure permission nodev are set on /home
      mount:
        path: /home
        src: '{{ mount_info.source }}'
        opts: '{{ mount_info.options }},nodev'
        state: mounted
        fstype: '{{ mount_info.fstype }}'
      when:
        - mount_info is defined and "nodev" not in mount_info.options
        - device_name.stdout is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_home_nodev
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed

    - name: Check information associated to mountpoint
      command: findmnt --fstab '/tmp'
      register: device_name
      failed_when: device_name.rc > 1
      changed_when: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_tmp_nodev
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Create mount_info dictionary variable
      set_fact:
        mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
      with_together:
        - '{{ device_name.stdout_lines[0].split() | list | lower }}'
        - '{{ device_name.stdout_lines[1].split() | list }}'
      when:
        - device_name.stdout is defined and device_name.stdout_lines is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_tmp_nodev
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Ensure permission nodev are set on /tmp
      mount:
        path: /tmp
        src: '{{ mount_info.source }}'
        opts: '{{ mount_info.options }},nodev'
        state: mounted
        fstype: '{{ mount_info.fstype }}'
      when:
        - mount_info is defined and "nodev" not in mount_info.options
        - device_name.stdout is defined
        - (device_name.stdout | length > 0)
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - mount_option_tmp_nodev
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6
        - NIST-800-53-AC-6(1)
        - NIST-800-53-MP-7

    - name: Ensure libselinux1 is installed
      package:
        name: libselinux1
        state: present
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - package_libselinux_installed
        - high_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure mcstrans is removed
      package:
        name: mcstrans
        state: absent
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - package_mcstrans_removed
        - low_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure setroubleshoot is removed
      package:
        name: setroubleshoot
        state: absent
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - package_setroubleshoot_removed
        - low_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Test for existence /etc/ssh/sshd_config
      stat:
        path: /etc/ssh/sshd_config
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_owner_sshd_config
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-17(a)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure owner 0 on /etc/ssh/sshd_config
      file:
        path: /etc/ssh/sshd_config
        owner: '0'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_owner_sshd_config
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-17(a)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Find /etc/ssh/ file(s)
      find:
        paths: /etc/ssh/
        patterns: ^.*_key$
        use_regex: true
      register: files_found
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_sshd_private_key
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-17(a)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - NIST-800-171-3.1.13
        - NIST-800-171-3.13.10

    - name: Set permissions for /etc/ssh/ file(s)
      file:
        path: '{{ item.path }}'
        mode: '0400'
      with_items:
        - '{{ files_found.files }}'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_sshd_private_key
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-17(a)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - NIST-800-171-3.1.13
        - NIST-800-171-3.13.10

    - name: Test for existence /etc/ssh/sshd_config
      stat:
        path: /etc/ssh/sshd_config
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_groupowner_sshd_config
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-17(a)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure group owner 0 on /etc/ssh/sshd_config
      file:
        path: /etc/ssh/sshd_config
        group: '0'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_groupowner_sshd_config
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-17(a)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Find /etc/ssh/ file(s)
      find:
        paths: /etc/ssh/
        patterns: ^.*.pub$
        use_regex: true
      register: files_found
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_sshd_pub_key
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-17(a)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - NIST-800-171-3.1.13
        - NIST-800-171-3.13.10

    - name: Set permissions for /etc/ssh/ file(s)
      file:
        path: '{{ item.path }}'
        mode: '0644'
      with_items:
        - '{{ files_found.files }}'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_sshd_pub_key
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-17(a)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)
        - NIST-800-171-3.1.13
        - NIST-800-171-3.13.10

    - name: Test for existence /etc/ssh/sshd_config
      stat:
        path: /etc/ssh/sshd_config
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_sshd_config
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-17(a)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure permission 0600 on /etc/ssh/sshd_config
      file:
        path: /etc/ssh/sshd_config
        mode: '0600'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_sshd_config
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-17(a)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Disable SSH Access via Empty Passwords
      block:

        - name: Deduplicate values from /etc/ssh/sshd_config
          lineinfile:
            path: /etc/ssh/sshd_config
            create: false
            regexp: (?i)^\s*PermitEmptyPasswords\s+
            state: absent

        - name: Insert correct line to /etc/ssh/sshd_config
          lineinfile:
            path: /etc/ssh/sshd_config
            create: true
            line: PermitEmptyPasswords no
            state: present
            insertbefore: ^[#\s]*Match
            validate: /usr/sbin/sshd -t -f %s
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sshd_disable_empty_passwords
        - high_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-17(a)
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.1
        - NIST-800-171-3.1.5
        - CJIS-5.5.6

    - name: Disable SSH Root Login
      block:

        - name: Deduplicate values from /etc/ssh/sshd_config
          lineinfile:
            path: /etc/ssh/sshd_config
            create: false
            regexp: (?i)^\s*PermitRootLogin\s+
            state: absent

        - name: Insert correct line to /etc/ssh/sshd_config
          lineinfile:
            path: /etc/ssh/sshd_config
            create: true
            line: PermitRootLogin no
            state: present
            insertbefore: ^[#\s]*Match
            validate: /usr/sbin/sshd -t -f %s
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sshd_disable_root_login
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-6(2)
        - NIST-800-53-AC-17(a)
        - NIST-800-53-IA-2
        - NIST-800-53-IA-2(5)
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-
        - NIST-800-171-3.1.1
        - NIST-800-171-3.1.5
        - CJIS-5.5.6

    - name: Set LogLevel to INFO
      block:

        - name: Deduplicate values from /etc/ssh/sshd_config
          lineinfile:
            path: /etc/ssh/sshd_config
            create: false
            regexp: (?i)^\s*LogLevel\s+
            state: absent

        - name: Insert correct line to /etc/ssh/sshd_config
          lineinfile:
            path: /etc/ssh/sshd_config
            create: true
            line: LogLevel INFO
            state: present
            insertbefore: ^[#\s]*Match
            validate: /usr/sbin/sshd -t -f %s
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sshd_set_loglevel_info
        - low_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-17(a)
        - NIST-800-53-CM-6(a)

    - name: Disable SSH Support for .rhosts Files
      block:

        - name: Deduplicate values from /etc/ssh/sshd_config
          lineinfile:
            path: /etc/ssh/sshd_config
            create: false
            regexp: (?i)^\s*IgnoreRhosts\s+
            state: absent

        - name: Insert correct line to /etc/ssh/sshd_config
          lineinfile:
            path: /etc/ssh/sshd_config
            create: true
            line: IgnoreRhosts yes
            state: present
            insertbefore: ^[#\s]*Match
            validate: /usr/sbin/sshd -t -f %s
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sshd_disable_rhosts
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-17(a)
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.12
        - CJIS-5.5.6

    - name: Enable SSH Warning Banner
      block:

        - name: Deduplicate values from /etc/ssh/sshd_config
          lineinfile:
            path: /etc/ssh/sshd_config
            create: false
            regexp: (?i)^\s*Banner\s+
            state: absent

        - name: Insert correct line to /etc/ssh/sshd_config
          lineinfile:
            path: /etc/ssh/sshd_config
            create: true
            line: Banner /etc/issue
            state: present
            insertbefore: ^[#\s]*Match
            validate: /usr/sbin/sshd -t -f %s
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sshd_enable_warning_banner
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-8(a)
        - NIST-800-53-AC-8(c)
        - NIST-800-53-AC-17(a)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.9
        - CJIS-5.5.6

    - name: Disable SSH TCP Forwarding
      block:

        - name: Deduplicate values from /etc/ssh/sshd_config
          lineinfile:
            path: /etc/ssh/sshd_config
            create: false
            regexp: (?i)^\s*AllowTcpForwarding\s+
            state: absent

        - name: Insert correct line to /etc/ssh/sshd_config
          lineinfile:
            path: /etc/ssh/sshd_config
            create: true
            line: AllowTcpForwarding no
            state: present
            insertbefore: ^[#\s]*Match
            validate: /usr/sbin/sshd -t -f %s
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sshd_disable_tcp_forwarding
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Disable Host-Based Authentication
      block:

        - name: Deduplicate values from /etc/ssh/sshd_config
          lineinfile:
            path: /etc/ssh/sshd_config
            create: false
            regexp: (?i)^\s*HostbasedAuthentication\s+
            state: absent

        - name: Insert correct line to /etc/ssh/sshd_config
          lineinfile:
            path: /etc/ssh/sshd_config
            create: true
            line: HostbasedAuthentication no
            state: present
            insertbefore: ^[#\s]*Match
            validate: /usr/sbin/sshd -t -f %s
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - disable_host_auth
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-3
        - NIST-800-53-AC-17(a)
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.12
        - CJIS-5.5.6

    - name: Do Not Allow SSH Environment Options
      block:

        - name: Deduplicate values from /etc/ssh/sshd_config
          lineinfile:
            path: /etc/ssh/sshd_config
            create: false
            regexp: (?i)^\s*PermitUserEnvironment\s+
            state: absent

        - name: Insert correct line to /etc/ssh/sshd_config
          lineinfile:
            path: /etc/ssh/sshd_config
            create: true
            line: PermitUserEnvironment no
            state: present
            insertbefore: ^[#\s]*Match
            validate: /usr/sbin/sshd -t -f %s
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sshd_do_not_permit_user_env
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-AC-17(a)
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.12
        - CJIS-5.5.6

    - name: Test for existence /etc/cron.monthly/
      stat:
        path: /etc/cron.monthly/
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_owner_cron_monthly
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure owner 0 on /etc/cron.monthly/
      file:
        path: /etc/cron.monthly/
        owner: '0'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_owner_cron_monthly
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Test for existence /etc/cron.d/
      stat:
        path: /etc/cron.d/
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_cron_d
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure permission 0700 on /etc/cron.d/
      file:
        path: /etc/cron.d/
        mode: '0700'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_cron_d
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Test for existence /etc/cron.weekly/
      stat:
        path: /etc/cron.weekly/
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_owner_cron_weekly
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure owner 0 on /etc/cron.weekly/
      file:
        path: /etc/cron.weekly/
        owner: '0'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_owner_cron_weekly
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Test for existence /etc/cron.hourly/
      stat:
        path: /etc/cron.hourly/
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_cron_hourly
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure permission 0700 on /etc/cron.hourly/
      file:
        path: /etc/cron.hourly/
        mode: '0700'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_cron_hourly
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Test for existence /etc/cron.d/
      stat:
        path: /etc/cron.d/
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_groupowner_cron_d
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure group owner 0 on /etc/cron.d/
      file:
        path: /etc/cron.d/
        group: '0'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_groupowner_cron_d
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Test for existence /etc/crontab
      stat:
        path: /etc/crontab
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_crontab
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure permission 0600 on /etc/crontab
      file:
        path: /etc/crontab
        mode: '0600'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_crontab
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Test for existence /etc/cron.daily/
      stat:
        path: /etc/cron.daily/
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_owner_cron_daily
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure owner 0 on /etc/cron.daily/
      file:
        path: /etc/cron.daily/
        owner: '0'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_owner_cron_daily
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Test for existence /etc/cron.weekly/
      stat:
        path: /etc/cron.weekly/
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_cron_weekly
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure permission 0700 on /etc/cron.weekly/
      file:
        path: /etc/cron.weekly/
        mode: '0700'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_cron_weekly
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Test for existence /etc/cron.hourly/
      stat:
        path: /etc/cron.hourly/
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_groupowner_cron_hourly
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure group owner 0 on /etc/cron.hourly/
      file:
        path: /etc/cron.hourly/
        group: '0'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_groupowner_cron_hourly
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Test for existence /etc/cron.daily/
      stat:
        path: /etc/cron.daily/
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_groupowner_cron_daily
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure group owner 0 on /etc/cron.daily/
      file:
        path: /etc/cron.daily/
        group: '0'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_groupowner_cron_daily
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Test for existence /etc/cron.hourly/
      stat:
        path: /etc/cron.hourly/
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_owner_cron_hourly
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure owner 0 on /etc/cron.hourly/
      file:
        path: /etc/cron.hourly/
        owner: '0'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_owner_cron_hourly
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Test for existence /etc/cron.d/
      stat:
        path: /etc/cron.d/
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_owner_cron_d
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure owner 0 on /etc/cron.d/
      file:
        path: /etc/cron.d/
        owner: '0'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_owner_cron_d
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Test for existence /etc/cron.monthly/
      stat:
        path: /etc/cron.monthly/
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_groupowner_cron_monthly
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure group owner 0 on /etc/cron.monthly/
      file:
        path: /etc/cron.monthly/
        group: '0'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_groupowner_cron_monthly
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Test for existence /etc/cron.weekly/
      stat:
        path: /etc/cron.weekly/
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_groupowner_cron_weekly
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure group owner 0 on /etc/cron.weekly/
      file:
        path: /etc/cron.weekly/
        group: '0'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_groupowner_cron_weekly
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Test for existence /etc/cron.monthly/
      stat:
        path: /etc/cron.monthly/
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_cron_monthly
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure permission 0700 on /etc/cron.monthly/
      file:
        path: /etc/cron.monthly/
        mode: '0700'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_cron_monthly
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Test for existence /etc/crontab
      stat:
        path: /etc/crontab
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_groupowner_crontab
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure group owner 0 on /etc/crontab
      file:
        path: /etc/crontab
        group: '0'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_groupowner_crontab
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Test for existence /etc/crontab
      stat:
        path: /etc/crontab
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_owner_crontab
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure owner 0 on /etc/crontab
      file:
        path: /etc/crontab
        owner: '0'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_owner_crontab
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Test for existence /etc/cron.daily/
      stat:
        path: /etc/cron.daily/
      register: file_exists
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_cron_daily
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure permission 0700 on /etc/cron.daily/
      file:
        path: /etc/cron.daily/
        mode: '0700'
      when:
        - file_exists.stat is defined and file_exists.stat.exists
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - file_permissions_cron_daily
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Disable service squid
      block:

        - name: Gather the service facts
          service_facts: null

        - name: Disable service squid
          systemd:
            name: squid.service
            enabled: 'no'
            state: stopped
            masked: 'yes'
          when: '"squid.service" in ansible_facts.services'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_squid_disabled
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Unit Socket Exists - squid.socket
      command: systemctl list-unit-files squid.socket
      args:
        warn: false
      register: socket_file_exists
      changed_when: false
      ignore_errors: true
      check_mode: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_squid_disabled
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Disable socket squid
      systemd:
        name: squid.socket
        enabled: 'no'
        state: stopped
        masked: 'yes'
      when:
        - '"squid.socket" in socket_file_exists.stdout_lines[1]'
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_squid_disabled
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure xorg-x11-server-common is removed
      package:
        name: xorg-x11-server-common
        state: absent
      tags:
        - package_xorg-x11-server-common_removed
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Switch to multi-user runlevel
      file:
        src: /usr/lib/systemd/system/multi-user.target
        dest: /etc/systemd/system/default.target
        state: link
        force: true
      tags:
        - xwindows_runlevel_target
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - reboot_required
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Disable service avahi-daemon
      block:

        - name: Gather the service facts
          service_facts: null

        - name: Disable service avahi-daemon
          systemd:
            name: avahi-daemon.service
            enabled: 'no'
            state: stopped
            masked: 'yes'
          when: '"avahi-daemon.service" in ansible_facts.services'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_avahi-daemon_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Unit Socket Exists - avahi-daemon.socket
      command: systemctl list-unit-files avahi-daemon.socket
      args:
        warn: false
      register: socket_file_exists
      changed_when: false
      ignore_errors: true
      check_mode: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_avahi-daemon_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Disable socket avahi-daemon
      systemd:
        name: avahi-daemon.socket
        enabled: 'no'
        state: stopped
        masked: 'yes'
      when:
        - '"avahi-daemon.socket" in socket_file_exists.stdout_lines[1]'
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_avahi-daemon_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Disable service snmpd
      block:

        - name: Gather the service facts
          service_facts: null

        - name: Disable service snmpd
          systemd:
            name: snmpd.service
            enabled: 'no'
            state: stopped
            masked: 'yes'
          when: '"snmpd.service" in ansible_facts.services'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_snmpd_disabled
        - low_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Unit Socket Exists - snmpd.socket
      command: systemctl list-unit-files snmpd.socket
      args:
        warn: false
      register: socket_file_exists
      changed_when: false
      ignore_errors: true
      check_mode: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_snmpd_disabled
        - low_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Disable socket snmpd
      systemd:
        name: snmpd.socket
        enabled: 'no'
        state: stopped
        masked: 'yes'
      when:
        - '"snmpd.socket" in socket_file_exists.stdout_lines[1]'
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_snmpd_disabled
        - low_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Disable service cups
      block:

        - name: Gather the service facts
          service_facts: null

        - name: Disable service cups
          systemd:
            name: cups.service
            enabled: 'no'
            state: stopped
            masked: 'yes'
          when: '"cups.service" in ansible_facts.services'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_cups_disabled
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Unit Socket Exists - cups.socket
      command: systemctl list-unit-files cups.socket
      args:
        warn: false
      register: socket_file_exists
      changed_when: false
      ignore_errors: true
      check_mode: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_cups_disabled
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Disable socket cups
      systemd:
        name: cups.socket
        enabled: 'no'
        state: stopped
        masked: 'yes'
      when:
        - '"cups.socket" in socket_file_exists.stdout_lines[1]'
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_cups_disabled
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Disable service named
      block:

        - name: Gather the service facts
          service_facts: null

        - name: Disable service named
          systemd:
            name: named.service
            enabled: 'no'
            state: stopped
            masked: 'yes'
          when: '"named.service" in ansible_facts.services'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_named_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Unit Socket Exists - named.socket
      command: systemctl list-unit-files named.socket
      args:
        warn: false
      register: socket_file_exists
      changed_when: false
      ignore_errors: true
      check_mode: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_named_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Disable socket named
      systemd:
        name: named.socket
        enabled: 'no'
        state: stopped
        masked: 'yes'
      when:
        - '"named.socket" in socket_file_exists.stdout_lines[1]'
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_named_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Ensure openldap-servers is removed
      package:
        name: openldap-servers
        state: absent
      tags:
        - package_openldap-servers_removed
        - low_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Ensure openldap-clients is removed
      package:
        name: openldap-clients
        state: absent
      tags:
        - package_openldap-clients_removed
        - low_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Disable service rpcbind
      block:

        - name: Gather the service facts
          service_facts: null

        - name: Disable service rpcbind
          systemd:
            name: rpcbind.service
            enabled: 'no'
            state: stopped
            masked: 'yes'
          when: '"rpcbind.service" in ansible_facts.services'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_rpcbind_disabled
        - low_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Unit Socket Exists - rpcbind.socket
      command: systemctl list-unit-files rpcbind.socket
      args:
        warn: false
      register: socket_file_exists
      changed_when: false
      ignore_errors: true
      check_mode: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_rpcbind_disabled
        - low_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Disable socket rpcbind
      systemd:
        name: rpcbind.socket
        enabled: 'no'
        state: stopped
        masked: 'yes'
      when:
        - '"rpcbind.socket" in socket_file_exists.stdout_lines[1]'
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_rpcbind_disabled
        - low_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Disable service nfs
      block:

        - name: Gather the service facts
          service_facts: null

        - name: Disable service nfs
          systemd:
            name: nfs.service
            enabled: 'no'
            state: stopped
            masked: 'yes'
          when: '"nfs.service" in ansible_facts.services'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_nfs_disabled
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Unit Socket Exists - nfs.socket
      command: systemctl list-unit-files nfs.socket
      args:
        warn: false
      register: socket_file_exists
      changed_when: false
      ignore_errors: true
      check_mode: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_nfs_disabled
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Disable socket nfs
      systemd:
        name: nfs.socket
        enabled: 'no'
        state: stopped
        masked: 'yes'
      when:
        - '"nfs.socket" in socket_file_exists.stdout_lines[1]'
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_nfs_disabled
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Disable service vsftpd
      block:

        - name: Gather the service facts
          service_facts: null

        - name: Disable service vsftpd
          systemd:
            name: vsftpd.service
            enabled: 'no'
            state: stopped
            masked: 'yes'
          when: '"vsftpd.service" in ansible_facts.services'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_vsftpd_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Unit Socket Exists - vsftpd.socket
      command: systemctl list-unit-files vsftpd.socket
      args:
        warn: false
      register: socket_file_exists
      changed_when: false
      ignore_errors: true
      check_mode: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_vsftpd_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Disable socket vsftpd
      systemd:
        name: vsftpd.socket
        enabled: 'no'
        state: stopped
        masked: 'yes'
      when:
        - '"vsftpd.socket" in socket_file_exists.stdout_lines[1]'
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_vsftpd_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Ensure chrony is installed
      package:
        name: chrony
        state: present
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - package_chrony_installed
        - medium_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Enable service chronyd
      block:

        - name: Gather the package facts
          #ignore_errors: yes
          package_facts:
            manager: auto
          ignore_errors: yes

        - name: Enable service chronyd
          service:
            name: chronyd
            enabled: 'yes'
            state: started
            #when:
            #  - '"chrony" in ansible_facts.packages'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_chronyd_enabled
        - medium_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Detect if chrony is already configured with pools or servers
      find:
        path: /etc
        patterns: chrony.conf
        contains: ^[\s]*(?:server|pool)[\s]+[\w]+
      register: chrony_servers
      tags:
        - chronyd_specify_remote_server
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Configure remote time servers
      lineinfile:
        path: /etc/chrony.conf
        line: server {{ item }}
        state: present
        create: true
      loop: '{{ var_multiple_time_servers.split(",") }}'
      when: chrony_servers.matched == 0
      tags:
        - chronyd_specify_remote_server
        - medium_severity
        - configure_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Disable service dovecot
      block:

        - name: Gather the service facts
          service_facts: null

        - name: Disable service dovecot
          systemd:
            name: dovecot.service
            enabled: 'no'
            state: stopped
            masked: 'yes'
          when: '"dovecot.service" in ansible_facts.services'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_dovecot_disabled
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Unit Socket Exists - dovecot.socket
      command: systemctl list-unit-files dovecot.socket
      args:
        warn: false
      register: socket_file_exists
      changed_when: false
      ignore_errors: true
      check_mode: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_dovecot_disabled
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Disable socket dovecot
      systemd:
        name: dovecot.socket
        enabled: 'no'
        state: stopped
        masked: 'yes'
      when:
        - '"dovecot.socket" in socket_file_exists.stdout_lines[1]'
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_dovecot_disabled
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Disable service smb
      block:

        - name: Gather the service facts
          service_facts: null

        - name: Disable service smb
          systemd:
            name: smb.service
            enabled: 'no'
            state: stopped
            masked: 'yes'
          when: '"smb.service" in ansible_facts.services'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_smb_disabled
        - low_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Unit Socket Exists - smb.socket
      command: systemctl list-unit-files smb.socket
      args:
        warn: false
      register: socket_file_exists
      changed_when: false
      ignore_errors: true
      check_mode: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_smb_disabled
        - low_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Disable socket smb
      systemd:
        name: smb.socket
        enabled: 'no'
        state: stopped
        masked: 'yes'
      when:
        - '"smb.socket" in socket_file_exists.stdout_lines[1]'
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_smb_disabled
        - low_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Disable service httpd
      block:

        - name: Gather the service facts
          service_facts: null

        - name: Disable service httpd
          systemd:
            name: httpd.service
            enabled: 'no'
            state: stopped
            masked: 'yes'
          when: '"httpd.service" in ansible_facts.services'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_httpd_disabled
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Unit Socket Exists - httpd.socket
      command: systemctl list-unit-files httpd.socket
      args:
        warn: false
      register: socket_file_exists
      changed_when: false
      ignore_errors: true
      check_mode: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_httpd_disabled
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Disable socket httpd
      systemd:
        name: httpd.socket
        enabled: 'no'
        state: stopped
        masked: 'yes'
      when:
        - '"httpd.socket" in socket_file_exists.stdout_lines[1]'
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_httpd_disabled
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Disable service dhcpd
      block:

        - name: Gather the service facts
          service_facts: null

        - name: Disable service dhcpd
          systemd:
            name: dhcpd.service
            enabled: 'no'
            state: stopped
            masked: 'yes'
          when: '"dhcpd.service" in ansible_facts.services'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_dhcpd_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Unit Socket Exists - dhcpd.socket
      command: systemctl list-unit-files dhcpd.socket
      args:
        warn: false
      register: socket_file_exists
      changed_when: false
      ignore_errors: true
      check_mode: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_dhcpd_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Disable socket dhcpd
      systemd:
        name: dhcpd.socket
        enabled: 'no'
        state: stopped
        masked: 'yes'
      when:
        - '"dhcpd.socket" in socket_file_exists.stdout_lines[1]'
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_dhcpd_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Ensure talk is removed
      package:
        name: talk
        state: absent
      tags:
        - package_talk_removed
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure rsh is removed
      package:
        name: rsh
        state: absent
      tags:
        - package_rsh_removed
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-171-3.1.13

    - name: Ensure telnet is removed
      package:
        name: telnet
        state: absent
      tags:
        - package_telnet_removed
        - low_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-171-3.1.13

    - name: Ensure ypbind is removed
      package:
        name: ypbind
        state: absent
      tags:
        - package_ypbind_removed
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed

    - name: Ensure ypserv is removed
      package:
        name: ypserv
        state: absent
      tags:
        - package_ypserv_removed
        - high_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-IA-5(1)(c)

    - name: Disable service tftp
      block:

        - name: Gather the service facts
          service_facts: null

        - name: Disable service tftp
          systemd:
            name: tftp.service
            enabled: 'no'
            state: stopped
            masked: 'yes'
          when: '"tftp.service" in ansible_facts.services'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_tftp_disabled
        - high_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Unit Socket Exists - tftp.socket
      command: systemctl list-unit-files tftp.socket
      args:
        warn: false
      register: socket_file_exists
      changed_when: false
      ignore_errors: true
      check_mode: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_tftp_disabled
        - high_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Disable socket tftp
      systemd:
        name: tftp.socket
        enabled: 'no'
        state: stopped
        masked: 'yes'
      when:
        - '"tftp.socket" in socket_file_exists.stdout_lines[1]'
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_tftp_disabled
        - high_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)

    - name: Ensure tcpd (proving tcp_wrappers) is installed
      package:
        name: tcpd
        state: present
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - package_tcp_wrappers_installed
        - medium_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)

    - name: Disable service xinetd
      block:

        - name: Gather the service facts
          service_facts: null

        - name: Disable service xinetd
          systemd:
            name: xinetd.service
            enabled: 'no'
            state: stopped
            masked: 'yes'
          when: '"xinetd.service" in ansible_facts.services'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_xinetd_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.4.7

    - name: Unit Socket Exists - xinetd.socket
      command: systemctl list-unit-files xinetd.socket
      args:
        warn: false
      register: socket_file_exists
      changed_when: false
      ignore_errors: true
      check_mode: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_xinetd_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.4.7

    - name: Disable socket xinetd
      systemd:
        name: xinetd.socket
        enabled: 'no'
        state: stopped
        masked: 'yes'
      when:
        - '"xinetd.socket" in socket_file_exists.stdout_lines[1]'
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_xinetd_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.4.7

